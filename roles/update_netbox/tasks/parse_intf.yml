---

- name: CAPTURE INTERFACE BLOCK
  block:
  - name: capture and parse 'show interface'
    ansible.utils.cli_parse:
      command: "show interfaces"
      parser:
        name: ansible.netcommon.ntc_templates
    register: _int_result
  - debug:
      var: _int_result.parsed
      verbosity: 2

  - name: EOS facts
    arista.eos.eos_facts:
      gather_subset:
        - all
      gather_network_resources:
        - l3_interfaces
    register: _eos_facts
    become: true
  - debug:
      var: _eos_facts
      verbosity: 2


  - debug:
      var: item
      verbosity: 2
    with_dict: "{{ _eos_facts.ansible_facts.ansible_net_interfaces }}"

  - debug:
      msg: "{{ item.value.bandwidth / 1000 | int }}"
      verbosity: 2
    with_dict: "{{ _eos_facts.ansible_facts.ansible_net_interfaces }}"

        manufacturer: "{% if ansible_network_os == 'eos' %}arista{% else %}cisco{% endif %}"



  - debug:
      msg: "{% if item.value.duplex == 'duplexFull' %}Full{% else %}UNKNOWN{% endif %}" 
      verbosity: 2
    with_dict: "{{ _eos_facts.ansible_facts.ansible_net_interfaces }}"



  - set_fact:
      _facts: "{{ _eos_facts }}"
  when: ansible_network_os == 'eos'
  tags: [facts, inventory]





- name: NETBOX BLOCK
  block:
  # - name: push interface data to netbox
  #   netbox.netbox.netbox_device_interface:
  #     netbox_url: "{{ net_netbox_url }}"
  #     netbox_token: "{{ net_netbox_token }}"
  #     validate_certs: no
  #     data:
  #       device: "{{ inventory_hostname }}"
  #       name: "{{ item.interface }}"
  #       description: "{{ item.description | default(omit) }}"
  #       mac_address: "{{ item.address | default('00:00:00:00:00:00', true) | ansible.utils.hwaddr('linux') }}"
  #       type: "Virtual"
  #       enabled: "{{ item.enabled | default(omit) }}"
  #       mtu: "{{ item.mtu | default(omit) }}"
  #   loop: "{{ _int_result.parsed }}"
  #   loop_control:
  #     label: "{{ item.interface }}"


  - name: push interface data to netbox
    netbox.netbox.netbox_device_interface:
      netbox_url: "{{ net_netbox_url }}"
      netbox_token: "{{ net_netbox_token }}"
      validate_certs: no
      data:
        device: "{{ inventory_hostname }}"
        name: "{{ item.key }}"
        description: "{{ item.description | default(omit) }}"
        mac_address: "{{ item.macaddress | default('00:00:00:00:00:00', true) | ansible.utils.hwaddr('linux') }}"
        type: "Virtual"
        enabled: "{{ item.enabled | default(omit) }}"
        mtu: "{{ item.mtu | default(omit) }}"
    with_items: "{{ _eos_facts.ansible_facts.ansible_net_interfaces }}"


  - name: push IP addresses to device interfaces
    netbox.netbox.netbox_ip_address:
      netbox_url: "{{ net_netbox_url }}"
      netbox_token: "{{ net_netbox_token }}"
      validate_certs: no
      data:
        address: "{{ item.ip_address }}"
        assigned_object:
          name: "{{ item.interface }}"
          device: "{{ inventory_hostname }}"
    loop: "{{ _int_result.parsed }}"
    loop_control:
      label: "{{ item.interface }} ==> {{ item.ip_address }}"
    when: item.ip_address != ""
  tags: [netbox]
  